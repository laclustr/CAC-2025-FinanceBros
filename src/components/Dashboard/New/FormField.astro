---
interface Props {
  id: string;
  name: string;
  label: string;
  type: 'text' | 'number' | 'date' | 'select';
  options?: string[];
  placeholder?: string;
  step?: string;
  focusColor: 'red' | 'green' | 'blue';
  value?: string;
  error?: string;
}

const {
  id,
  name,
  label,
  type,
  options = [],
  placeholder,
  step,
  focusColor,
  value = '',
  error = ''
} = Astro.props;

const focusRing = {
  red: 'focus:ring-red-500',
  green: 'focus:ring-green-500',
  blue: 'focus:ring-blue-500',
}[focusColor] ?? 'focus:ring-blue-500';

const baseClasses = `w-full px-3 sm:px-4 py-2 sm:py-3 border rounded-lg focus:outline-none transition-colors text-sm sm:text-base focus:ring-2 ${focusRing}`;
const inputClasses = `${baseClasses} border-gray-300 ${error ? 'border-red-500' : ''}`;
---

<div class="mb-4">
  <label for={id} class="block text-sm font-medium text-gray-700 mb-2">
    {label}
  </label>

  {type === 'select' ? (
    <select
      id={id}
      name={name}
      class={inputClasses}
      required
    >
      {placeholder && <option value="" disabled selected>{placeholder}</option>}
      {options.map(option => (
        <option value={option} selected={value === option}>{option}</option>
      ))}
    </select>
  ) : (
    <input
      id={id}
      name={name}
      type={type}
      value={value}
      step={step}
      placeholder={placeholder}
      class={inputClasses}
    />
  )}

  {error && <div class="text-red-600 text-xs sm:text-sm mt-1">{error}</div>}
</div>
---
import { Card, CardHeader, CardTitle, CardContent, CardFooter } from "@/components/starwind/card";
import { Input } from "@/components/starwind/input";
import { Label } from "@/components/starwind/label";
import { Button } from "@/components/starwind/button";

const { type } = Astro.props;
const apiPath = type === "register" ? "/api/register" : "/api/login";
const title = type === "register" ? "Register" : "Login";
---

<div class="flex items-center justify-center min-h-screen bg-blue-50 p-4">
  <Card class="w-full max-w-md">
    <CardHeader>
      <CardTitle class="text-center">{title}</CardTitle>
    </CardHeader>
    <form id="authForm" data-api={apiPath} novalidate>
      <CardContent class="flex flex-col gap-4">
        <div class="flex flex-col gap-2">
          <Label for="email">Email</Label>
          <Input id="email" type="email" placeholder="Enter your email" />
        </div>
        <div class="flex flex-col gap-2">
          <Label for="password">Password</Label>
          <Input id="password" type="password" placeholder="Enter your password" />
        </div>
        <p id="errorMessage" class="text-red-500 text-sm"></p>
      </CardContent>
      <CardFooter>
        <Button id="submitBtn" type="submit" class="w-full">{title}</Button>
      </CardFooter>
    </form>
  </Card>
</div>

<script>
  const form = document.getElementById('authForm');
  const submitBtn = document.getElementById('submitBtn');
  const errorMessage = document.getElementById('errorMessage');
  const emailInput = document.getElementById('email');
  const passwordInput = document.getElementById('password');

  function validateEmail(email) {
    const emailRegex = /^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}$/;
    return emailRegex.test(email);
  }

  function validatePassword(password) {
    const passwordRegex = /^(?=.*[a-z])(?=.*[A-Z])(?=.*\d).{8,}$/;
    return passwordRegex.test(password);
  }

  function clearError() {
    errorMessage.textContent = '';
  }

  [emailInput, passwordInput].forEach(input => {
    input.addEventListener('input', clearError);
  });

  async function loginUser(email, password) {
    const loginRes = await fetch('/api/login', {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({ email, password }),
    });

    if (!loginRes.ok) {
      throw new Error('Login failed after registration.');
    }

    const loginData = await loginRes.json();
    if (!loginData.success) {
      throw new Error(loginData.error || 'Login failed.');
    }

    localStorage.setItem('token', loginData.token);
  }

  async function handleSubmit(e) {
    e.preventDefault();
    const apiPath = form.getAttribute('data-api');
    const email = emailInput.value.trim();
    const password = passwordInput.value.trim();

    if (!email) {
      errorMessage.textContent = 'Please enter your email address.';
      return;
    }

    if (!validateEmail(email)) {
      errorMessage.textContent = 'Please enter a valid email address.';
      return;
    }

    if (!password) {
      errorMessage.textContent = 'Please enter your password.';
      return;
    }

    if (!validatePassword(password)) {
      errorMessage.textContent = 'Password must be at least 8 characters, include uppercase, lowercase, and a number.';
      return;
    }

    submitBtn.disabled = true;
    submitBtn.textContent = `${apiPath.includes('register') ? 'Registering' : 'Logging in'}...`;
    errorMessage.textContent = '';

    try {
      const res = await fetch(apiPath, {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ email, password }),
      });

      if (!res.ok) {
        const errorText = await res.text();
        throw new Error(`Server error: ${res.status} - ${errorText}`);
      }

      const data = await res.json();

      if (!data.success) {
        throw new Error(data.error || 'Authentication failed.');
      }

      if (apiPath.includes('register')) {
        await loginUser(email, password);
      } else {
        localStorage.setItem('token', data.token);
      }

      window.location.href = '/dashboard';

    } catch (error) {
      errorMessage.textContent = `Error: ${error.message}`;
    } finally {
      submitBtn.disabled = false;
      submitBtn.textContent = apiPath.includes('register') ? 'Register' : 'Login';
    }
  }

  form.addEventListener('submit', handleSubmit);
</script>

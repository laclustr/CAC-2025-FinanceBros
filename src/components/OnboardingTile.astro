---
import { Card, CardHeader, CardTitle, CardContent, CardFooter } from "@/components/starwind/card";
import { Input } from "@/components/starwind/input";
import { Label } from "@/components/starwind/label";
import { Button } from "@/components/starwind/button";
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "@/components/starwind/select";
---

<style>
  input[type=number]::-webkit-inner-spin-button,
  input[type=number]::-webkit-outer-spin-button {
    -webkit-appearance: none;
    margin: 0;
  }
</style>

<div class="flex items-center justify-center min-h-screen pt-5 p-4">
  <Card class="w-full max-w-2xl shadow-xl border border-gray-200">
    <CardHeader>
      <CardTitle class="text-center text-3xl font-semibold text-blue-900">Welcome to FinanceBros</CardTitle>
      <p class="text-center text-sm text-gray-600">Set up your financial profile to get started</p>
    </CardHeader>
    <form id="onboardingForm" class="w-full space-y-6" novalidate>
      <CardContent class="space-y-6">
        <div class="flex flex-col gap-1">
          <Label for="age">Your Age <span class="text-red-500">*</span></Label>
          <Input id="age" name="age" type="number" inputmode="numeric" placeholder="e.g. 25" required />
        </div>

        <div class="flex flex-col gap-1">
          <Label for="employer">Employer</Label>
          <Input id="employer" name="employer" placeholder="e.g. Amazon" />
        </div>

        <div class="flex flex-col gap-1">
          <Label for="creditScore">Credit Score <span class="text-red-500">*</span></Label>
          <Input id="creditScore" name="creditScore" type="number" placeholder="e.g. 720" required />
        </div>

        <div class="flex flex-col gap-1">
          <Label for="income">Estimated Monthly Income <span class="text-red-500">*</span></Label>
          <Select id="income" name="income">
            <SelectTrigger>
              <SelectValue placeholder="Select income range" />
            </SelectTrigger>
            <SelectContent>
              <SelectItem value="under-1000">Under $1,000</SelectItem>
              <SelectItem value="1000-3000">$1,000 - $3,000</SelectItem>
              <SelectItem value="3000-5000">$3,000 - $5,000</SelectItem>
              <SelectItem value="over-5000">Over $5,000</SelectItem>
            </SelectContent>
          </Select>
        </div>

        <div class="space-y-4">
          <Label class="block">Bank Accounts <span class="text-red-500">*</span></Label>
          <div id="accountsContainer" class="space-y-4"></div>
          <Button type="button" variant="outline" id="addAccountBtn" class="w-full mt-2">+ Add Another Account</Button>
        </div>

        <p id="errorMessage" class="text-red-500 text-sm"></p>
      </CardContent>
      <CardFooter>
        <Button id="submitBtn" type="submit" class="w-full">Continue</Button>
      </CardFooter>
    </form>
  </Card>
</div>

<script type="module">
  let accountIndex = 0;
  const form = document.getElementById('onboardingForm');
  const accountsContainer = document.getElementById('accountsContainer');
  const addAccountBtn = document.getElementById('addAccountBtn');
  const errorMessage = document.getElementById('errorMessage');

  const createAccountGroup = (index) => {
    const wrapper = document.createElement('div');
    wrapper.className = "account-group space-y-2 p-3 bg-white border border-gray-200 rounded-xl relative shadow-sm";
    wrapper.innerHTML = `
      <div class="flex flex-col gap-2 md:flex-row md:gap-4">
        <div class="flex-1">
          <label for="account-name-${index}">Account Name <span class='text-red-500'>*</span></label>
          <input id="account-name-${index}" name="accountName[]" required class="w-full px-2 py-1 border rounded-md" />
        </div>
        <div class="flex-1">
          <label for="account-type-${index}">Type <span class='text-red-500'>*</span></label>
          <select id="account-type-${index}" name="accountType[]" required class="w-full px-2 py-1 border rounded-md">
            <option value="checking">Checking</option>
            <option value="savings">Savings</option>
          </select>
        </div>
      </div>
      <div>
        <label for="account-balance-${index}">Balance ($) <span class='text-red-500'>*</span></label>
        <input id="account-balance-${index}" name="accountBalance[]" inputmode="decimal" type="text" required class="balance-input w-full px-2 py-1 border rounded-md appearance-none" />
      </div>
      <button type="button" class="absolute top-2 right-2 text-red-500 text-sm hover:underline remove-account-btn">Remove</button>
    `;
    return wrapper;
  };

  const addAccount = () => {
    const group = createAccountGroup(accountIndex++);
    accountsContainer.appendChild(group);
  };

  addAccountBtn.addEventListener('click', addAccount);
  window.addEventListener('DOMContentLoaded', addAccount);

  accountsContainer.addEventListener('click', (e) => {
    if (e.target.classList.contains('remove-account-btn')) {
      e.target.closest('.account-group')?.remove();
    }
  });

  accountsContainer.addEventListener('input', (e) => {
    if (e.target.matches('.balance-input')) {
      const input = e.target;
      const selectionStart = input.selectionStart;
      const raw = input.value.replace(/[^\d.]/g, '');
      const parts = raw.split('.');
      const intPart = parts[0].replace(/^0+(?=\d)/, '').replace(/\B(?=(\d{3})+(?!\d))/g, ',');
      const decimalPart = parts[1] ? '.' + parts[1].slice(0, 2) : '';
      input.value = intPart + decimalPart;
      input.setSelectionRange(selectionStart, selectionStart);
    }
  });

  form.addEventListener('submit', async (e) => {
    e.preventDefault();
    errorMessage.textContent = '';

    const formData = new FormData(form);
    const age = parseInt(formData.get('age'));
    const income = formData.get('income');
    const employer = formData.get('employer');
    const creditScore = parseInt(formData.get('creditScore'));

    const accountNames = formData.getAll('accountName[]');
    const accountTypes = formData.getAll('accountType[]');
    const accountBalances = formData.getAll('accountBalance[]');

    if (!age || age < 13) {
      errorMessage.textContent = 'Please enter a valid age (13 or older)';
      return;
    }

    if (!income) {
      errorMessage.textContent = 'Please select your income range';
      return;
    }

    if (!creditScore || creditScore < 300 || creditScore > 850) {
      errorMessage.textContent = 'Credit score must be between 300 and 850';
      return;
    }

    if (accountNames.length === 0) {
      errorMessage.textContent = 'Please enter at least one bank account';
      return;
    }

    const accounts = accountNames.map((name, i) => ({
      name,
      type: accountTypes[i],
      balance: parseFloat(accountBalances[i].replace(/,/g, '')) || 0,
    }));

    if (accounts.some(acc => !acc.name || !acc.type || acc.balance <= 0)) {
      errorMessage.textContent = 'Each account must have a valid name, type, and positive balance';
      return;
    }

    const payload = {
      age,
      income,
      employer,
      creditScore,
      accounts,
    };

    try {
      const res = await fetch('/api/user/push/onboarding', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify(payload),
      });

      if (!res.ok) {
        const data = await res.json().catch(() => null);
        throw new Error(data?.error || 'Something went wrong during onboarding.');
      }

      window.location.href = '/dashboard';
    } catch (err) {
      errorMessage.textContent = err.message;
    }
  });
</script>
---
const tableId = "transaction-manager-table";
const ITEMS_PER_PAGE = 20;
---

<section id="transaction-section" class="min-h-screen bg-gray-50 p-3 sm:p-6 md:p-8 pt-2 sm:pt-1 md:pt-1 transition-all duration-300">
  <div class="max-w-screen-xl mx-auto">

    <!-- Filters -->
    <div class="mb-6 relative">
      <!-- Mobile Filter Toggle -->
      <button id="filter-toggle-button" class="md:hidden h-10 px-4 w-full flex items-center justify-center gap-2 text-sm font-medium text-gray-700 bg-white border border-gray-300 rounded-md shadow-sm hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500">
        <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 text-gray-400" viewBox="0 0 20 20" fill="currentColor"><path fill-rule="evenodd" d="M3 3a1 1 0 011-1h12a1 1 0 011 1v3a1 1 0 01-.293.707L13 10.414V15a1 1 0 01-.293.707l-2 2A1 1 0 019 17v-6.586L4.293 6.707A1 1 0 014 6V3z" clip-rule="evenodd" /></svg>
        <span>Filters</span>
      </button>

      <!-- Filter Controls -->
      <div id="filter-controls" class="hidden absolute z-10 left-0 right-0 mt-2 md:static md:flex md:flex-wrap md:items-end md:gap-x-4 md:gap-y-2 bg-white md:bg-transparent p-4 md:p-0 rounded-lg border md:border-none shadow-lg md:shadow-none">
          <div class="w-full md:w-auto">
              <label for="filter-name" class="block text-sm font-medium text-gray-700 mb-1">Search by name</label>
              <input type="text" id="filter-name" class="h-9 w-full text-sm border border-gray-300 rounded-md px-3 bg-white focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent" />
          </div>
          <div class="w-full md:w-auto">
              <label for="filter-type" class="block text-sm font-medium text-gray-700 mb-1">Type</label>
              <select id="filter-type" class="h-9 w-full text-sm border border-gray-300 rounded-md px-3 bg-white focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent">
                  <option value="all">All</option>
                  <option value="purchase">Purchase</option>
                  <option value="deposit">Deposit</option>
              </select>
          </div>
          <div class="w-full md:w-auto">
              <label for="filter-amount" class="block text-sm font-medium text-gray-700 mb-1">Max amount</label>
              <input type="number" id="filter-amount" class="h-9 w-full text-sm border border-gray-300 rounded-md px-3 bg-white focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent" />
          </div>
          <div class="w-full md:w-auto">
              <label for="filter-date" class="block text-sm font-medium text-gray-700 mb-1">Date</label>
              <input type="date" id="filter-date" class="h-9 w-full text-sm border border-gray-300 rounded-md px-3 bg-white focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent" />
          </div>
          <div class="w-full md:w-auto">
              <label for="sort-by" class="block text-sm font-medium text-gray-700 mb-1">Sort by</label>
              <select id="sort-by" class="h-9 w-28 text-sm border border-gray-300 rounded-md px-3 bg-white focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent">
                  <option value="date-desc">Newest</option>
                  <option value="date-asc">Oldest</option>
                  <option value="amount-desc">Highest</option>
                  <option value="amount-asc">Lowest</option>
              </select>
          </div>
          <div class="flex items-center gap-2 mt-4 md:mt-0 w-full md:w-auto">
               <button id="clear-filters" class="h-9 w-1/2 md:w-auto px-4 bg-gray-200 rounded-md text-sm hover:bg-gray-300 transition-colors duration-200">Clear</button>
               <button id="apply-filters" class="h-9 w-1/2 md:w-auto px-4 bg-blue-600 text-white rounded-md text-sm hover:bg-blue-700 transition-colors duration-200">Apply</button>
          </div>
      </div>
    </div>


    <!-- Table -->
    <div id={tableId} class="bg-white rounded-xl shadow text-sm mb-6 relative">
      <div class="text-gray-500 p-4">Loading transactions...</div>
    </div>

    <!-- Pagination -->
    <nav id="pagination-wrapper" class="flex justify-center pb-4"></nav>
  </div>

  <!-- Edit Modal -->
  <div id="edit-modal" class="fixed inset-0 bg-gray-900/50 backdrop-blur-sm z-50 hidden items-center justify-center p-4">
    <div class="bg-white rounded-lg shadow-xl w-full max-w-md">
      <div class="p-4 border-b">
        <h3 class="text-lg font-medium">Edit Transaction</h3>
      </div>
      <form id="edit-form">
        <div class="p-6">
            <input type="hidden" id="edit-id" />
            <input type="hidden" id="edit-type" />
            <div class="grid gap-5">
              <div class="grid grid-cols-4 items-center gap-4">
                <label for="edit-title" class="text-right text-sm font-medium">Title</label>
                <input id="edit-title" class="col-span-3 h-10 border border-gray-300 rounded-md px-3 text-sm focus:ring-2 focus:ring-blue-500 focus:border-transparent outline-none" required />
              </div>
              <div class="grid grid-cols-4 items-center gap-4">
                <label for="edit-amount" class="text-right text-sm font-medium">Amount</label>
                <input id="edit-amount" type="text" placeholder="0.00" class="col-span-3 h-10 border border-gray-300 rounded-md px-3 text-sm focus:ring-2 focus:ring-blue-500 focus:border-transparent outline-none" required />
              </div>
              <div class="grid grid-cols-4 items-center gap-4">
                <label for="edit-date" class="text-right text-sm font-medium">Date</label>
                <input id="edit-date" type="date" class="col-span-3 h-10 border border-gray-300 rounded-md px-3 text-sm focus:ring-2 focus:ring-blue-500 focus:border-transparent outline-none" required />
              </div>
            </div>
        </div>
        <div class="px-6 py-4 bg-gray-50 rounded-b-lg flex justify-end gap-2">
          <button type="button" id="cancel-edit" class="px-4 py-2 text-sm border rounded-md hover:bg-gray-100">Cancel</button>
          <button type="submit" class="px-4 py-2 text-sm bg-blue-600 text-white rounded-md hover:bg-blue-700">Save Changes</button>
        </div>
      </form>
    </div>
  </div>

  <!-- Delete Confirmation Modal -->
  <div id="delete-modal" class="fixed inset-0 bg-gray-900/50 backdrop-blur-sm z-50 hidden items-center justify-center p-4">
    <div class="bg-white rounded-lg shadow-xl w-full max-w-md">
       <div class="p-4 border-b">
        <h3 class="text-lg font-medium">Confirm Deletion</h3>
      </div>
      <div class="p-6">
        <p class="text-sm text-gray-600">Are you sure you want to delete this transaction? This action cannot be undone.</p>
      </div>
      <div class="px-6 py-4 bg-gray-50 rounded-b-lg flex justify-end gap-2">
        <button id="cancel-delete" class="px-4 py-2 text-sm border rounded-md hover:bg-gray-100">Cancel</button>
        <button id="confirm-delete" class="px-4 py-2 text-sm bg-red-600 text-white rounded-md hover:bg-red-700">Delete</button>
      </div>
    </div>
  </div>

  <script type="module" define:vars={{ tableId, ITEMS_PER_PAGE }}>
    // --- ELEMENT SELECTORS ---
    const elements = {
      section: document.getElementById("transaction-section"),
      tableContainer: document.getElementById(tableId),
      paginationWrapper: document.getElementById("pagination-wrapper"),
      editModal: {
        modal: document.getElementById("edit-modal"),
        form: document.getElementById("edit-form"),
        id: document.getElementById("edit-id"),
        type: document.getElementById("edit-type"),
        title: document.getElementById("edit-title"),
        amount: document.getElementById("edit-amount"),
        date: document.getElementById("edit-date"),
        cancel: document.getElementById("cancel-edit"),
      },
      deleteModal: {
        modal: document.getElementById("delete-modal"),
        cancel: document.getElementById("cancel-delete"),
        confirm: document.getElementById("confirm-delete"),
      },
      filters: {
        toggleButton: document.getElementById("filter-toggle-button"),
        controls: document.getElementById("filter-controls"),
        name: document.getElementById("filter-name"),
        type: document.getElementById("filter-type"),
        amount: document.getElementById("filter-amount"),
        date: document.getElementById("filter-date"),
        sort: document.getElementById("sort-by"),
        clear: document.getElementById("clear-filters"),
        apply: document.getElementById("apply-filters")
      },
    };

    // --- STATE MANAGEMENT ---
    let allTransactions = [];
    let filteredTransactions = [];
    let currentPage = 1;
    let activeTransaction = null;
    let currentAccountId = 'all'; // To track the selected account

    // --- UTILITY & HELPER FUNCTIONS ---
    const formatDateString = (d) => new Date(d).toLocaleDateString('en-US', { timeZone: 'UTC', month: 'short', day: 'numeric' });
    const truncateText = (text, maxLength) => text.length > maxLength ? text.substring(0, maxLength) + "..." : text;
    const cleanupDropdowns = () => document.querySelectorAll(".dropdown-menu").forEach(d => d.remove());

    // --- DIALOG/MODAL LOGIC (CUSTOM) ---
    function openModal(type, transaction) {
      activeTransaction = transaction;

      if (type === 'edit') {
        const { id, type: txType, title, amount, date } = transaction;
        elements.editModal.id.value = id;
        elements.editModal.type.value = txType;
        elements.editModal.title.value = title;
        // Set initial formatted value
        elements.editModal.amount.value = Math.abs(amount).toLocaleString('en-US', {minimumFractionDigits: 2, maximumFractionDigits: 2});
        
        const dateObj = new Date(date);
        const year = dateObj.getUTCFullYear();
        const month = (dateObj.getUTCMonth() + 1).toString().padStart(2, '0');
        const day = dateObj.getUTCDate().toString().padStart(2, '0');
        elements.editModal.date.value = `${year}-${month}-${day}`;

        elements.editModal.modal.classList.remove('hidden');
        elements.editModal.modal.classList.add('flex');
      } else if (type === 'delete') {
        elements.deleteModal.modal.classList.remove('hidden');
        elements.deleteModal.modal.classList.add('flex');
      }
    }

    function closeModal() {
        elements.editModal.modal.classList.add('hidden');
        elements.editModal.modal.classList.remove('flex');
        elements.deleteModal.modal.classList.add('hidden');
        elements.deleteModal.modal.classList.remove('flex');
        activeTransaction = null;
    }
    
    // --- API & DATA HANDLING ---
    async function refresh() {
      await fetchTransactions();
    }
    
    async function fetchTransactions() {
      try {
        elements.tableContainer.innerHTML = '<div class="text-gray-500 p-4">Loading transactions...</div>';
        const now = new Date(), start = new Date(now);
        start.setMonth(start.getMonth() - 2);
        const body = JSON.stringify({ startDate: start.toISOString(), endDate: now.toISOString() });
        const headers = { "Content-Type": "application/json" };
        const [p, d] = await Promise.all([
          fetch("/api/user/fetch/purchases", { method:"POST", headers, body }).then(r => r.json()),
          fetch("/api/user/fetch/deposits", { method:"POST", headers, body }).then(r => r.json())
        ]);
        
        allTransactions = [
          ...p.map(x => ({ ...x, type: "purchase", id: x.id })),
          ...d.map(x => ({ ...x, type: "deposit", id: x.id }))
        ];
        
        applyFiltersAndSort();
        render();
      } catch (err) {
        console.error("Failed to fetch transactions:", err);
        elements.tableContainer.innerHTML = '<div class="p-4 text-red-600">Failed to load transactions.</div>';
      }
    }

    // --- RENDERING LOGIC ---
    function applyFiltersAndSort() {
      const { name, type, amount, date, sort } = elements.filters;
      
      const accountFiltered = currentAccountId === 'all'
        ? allTransactions
        : allTransactions.filter(t => String(t.bankAccountId) === String(currentAccountId));
        
      const otherFiltered = accountFiltered.filter(t => {
        const matchName = !name.value || t.title.toLowerCase().includes(name.value.trim().toLowerCase());
        const matchType = type.value === 'all' || t.type === type.value;
        const matchAmount = !amount.value || Math.abs(t.amount) <= +amount.value;
        const matchDate = !date.value || new Date(t.date).toISOString().slice(0,10) === date.value;
        return matchName && matchType && matchAmount && matchDate;
      });

      // **FIX:** Add stable sort by using ID as a secondary sort criterion.
      otherFiltered.sort((a, b) => {
        switch (sort.value) {
          case "date-asc": {
            const dateDiff = new Date(a.date) - new Date(b.date);
            if (dateDiff !== 0) return dateDiff;
            return a.id - b.id; // Secondary sort
          }
          case "amount-desc":
            return Math.abs(b.amount) - Math.abs(a.amount);
          case "amount-asc":
            return Math.abs(a.amount) - Math.abs(b.amount);
          default: { // date-desc
            const dateDiff = new Date(b.date) - new Date(a.date);
            if (dateDiff !== 0) return dateDiff;
            return b.id - a.id; // Secondary sort
          }
        }
      });

      filteredTransactions = otherFiltered;

      if (Math.ceil(filteredTransactions.length / ITEMS_PER_PAGE) < currentPage) {
        currentPage = 1;
      }
    }
    
    function render() {
      renderTable();
      renderPagination();
      attachEventListeners();
    }

    function renderTable() {
      if (!filteredTransactions.length) {
        elements.tableContainer.innerHTML = `<div class="p-4 text-gray-500">No transactions found for the selected criteria.</div>`;
        return;
      }
      const pagedList = filteredTransactions.slice((currentPage - 1) * ITEMS_PER_PAGE, currentPage * ITEMS_PER_PAGE);
      const isMobile = window.innerWidth < 768;
      const tableContent = pagedList.map(t => isMobile ? createMobileCard(t) : createDesktopRow(t)).join('');
      
      if (isMobile) {
        elements.tableContainer.className = "bg-transparent shadow-none";
        elements.tableContainer.innerHTML = `<div class="p-2 sm:p-0">${tableContent}</div>`;
      } else {
        elements.tableContainer.className = "bg-white rounded-xl shadow text-sm mb-6 relative";
        elements.tableContainer.innerHTML = `
          <table class="w-full table-fixed text-sm border-collapse">
            <thead class="bg-gray-100/70 text-gray-600">
              <tr><th class="w-2/5 px-4 py-3 text-left font-medium">Title</th><th class="w-1/4 px-4 py-3 text-left font-medium">Amount</th><th class="w-1/4 px-4 py-3 text-left font-medium">Date</th><th class="w-1/6 px-4 py-3 text-left font-medium">Type</th><th class="w-12 px-4 py-3"></th></tr>
            </thead>
            <tbody class="divide-y divide-gray-200 bg-white">${tableContent}</tbody>
          </table>`;
      }
    }

    function createMobileCard(t) {
        return `
          <div class="p-4 bg-white mb-2 rounded-lg border border-gray-200/80">
            <div class="flex justify-between items-center">
              <div class="flex-1 min-w-0">
                <div class="font-medium text-gray-800 truncate">${truncateText(t.title, 25)}</div>
                <div class="text-sm text-gray-500 mt-1">${formatDateString(t.date)}</div>
              </div>
              <div class="flex items-center ml-4">
                <div class="font-semibold text-base ${t.type === 'deposit' ? 'text-green-600' : 'text-red-600'} mr-3">
                  ${t.type === 'deposit' ? '+' : '-'}$${Math.abs(t.amount).toFixed(2)}
                </div>
                <div class="relative"><button class="menu-btn p-2 rounded-full hover:bg-gray-100" data-id="${t.id}"><svg class="w-5 h-5 text-gray-500" fill="currentColor" viewBox="0 0 20 20"><path d="M10 6a2 2 0 110-4 2 2 0 010 4zM10 12a2 2 0 110-4 2 2 0 010 4zM10 18a2 2 0 110-4 2 2 0 010 4z"/></svg></button></div>
              </div>
            </div>
          </div>`;
    }

    function createDesktopRow(t) {
        return `
          <tr class="hover:bg-gray-50">
            <td class="px-4 py-3 truncate">${truncateText(t.title, 35)}</td>
            <td class="px-4 py-3 font-semibold ${t.type === 'deposit' ? 'text-green-600' : 'text-red-600'}">$${Math.abs(t.amount).toFixed(2)}</td>
            <td class="px-4 py-3 text-gray-500">${formatDateString(t.date)}</td>
            <td class="px-4 py-3 text-gray-500">${t.type === 'deposit' ? "Deposit" : "Purchase"}</td>
            <td class="px-4 py-3 text-right relative"><button class="menu-btn p-1 rounded-full hover:bg-gray-200" data-id="${t.id}"><svg class="w-4 h-4 text-gray-500" fill="currentColor" viewBox="0 0 20 20"><path d="M6 10a2 2 0 11-4 0 2 2 0 014 0zM12 10a2 2 0 11-4 0 2 2 0 014 0zM18 10a2 2 0 11-4 0 2 2 0 014 0z"/></svg></button></td>
          </tr>`;
    }
    
    function generatePaginationItems(currentPage, totalPages) {
        const delta = 1;
        const range = [];
        for (let i = Math.max(2, currentPage - delta); i <= Math.min(totalPages - 1, currentPage + delta); i++) {
            range.push(i);
        }
        if (currentPage - delta > 2) range.unshift('...');
        if (currentPage + delta < totalPages - 1) range.push('...');
        range.unshift(1);
        if (totalPages > 1) range.push(totalPages);
        return [...new Set(range)];
    }

    function renderPagination() {
        elements.paginationWrapper.innerHTML = "";
        const totalItems = filteredTransactions.length;
        if (totalItems <= ITEMS_PER_PAGE) return;

        const totalPages = Math.ceil(totalItems / ITEMS_PER_PAGE);

        const pageItems = generatePaginationItems(currentPage, totalPages).map(page => {
            if (page === '...') {
                return `<li><span class="px-3 py-2">...</span></li>`;
            }
            const activeClasses = 'bg-blue-600 text-white border-blue-600';
            const defaultClasses = 'bg-white hover:bg-gray-100';
            return `<li><button data-page="${page}" class="px-3 py-2 leading-tight border rounded-md ${page === currentPage ? activeClasses : defaultClasses}">${page}</button></li>`;
        }).join('');

        const prevDisabled = currentPage === 1 ? 'opacity-50 cursor-not-allowed' : '';
        const nextDisabled = currentPage === totalPages ? 'opacity-50 cursor-not-allowed' : '';

        elements.paginationWrapper.innerHTML = `
          <ul class="inline-flex items-center -space-x-px text-sm gap-1">
            <li><button data-page="${currentPage - 1}" class="px-3 py-2 leading-tight bg-white border rounded-md hover:bg-gray-100 ${prevDisabled}">Previous</button></li>
            ${pageItems}
            <li><button data-page="${currentPage + 1}" class="px-3 py-2 leading-tight bg-white border rounded-md hover:bg-gray-100 ${nextDisabled}">Next</button></li>
          </ul>`;
    }

    // --- EVENT LISTENERS ---
    function attachEventListeners() {
      elements.tableContainer.onclick = (e) => {
          const menuBtn = e.target.closest('.menu-btn');
          if (menuBtn) {
              e.stopPropagation();
              cleanupDropdowns();
              const transaction = allTransactions.find(t => t.id == menuBtn.dataset.id); 
              if (transaction) createDropdownMenu(menuBtn, transaction);
          }
      };
    }
    
    function createDropdownMenu(btn, transaction) {
      const dropdown = document.createElement("div");
      dropdown.onclick = (e) => e.stopPropagation();
      dropdown.className = "dropdown-menu absolute right-0 mt-2 w-32 bg-white border rounded-md shadow-lg z-50";

      const editItem = document.createElement("div");
      editItem.className = "px-3 py-2 hover:bg-gray-100 cursor-pointer text-sm";
      editItem.textContent = "Edit";
      editItem.onclick = () => {
        cleanupDropdowns();
        openModal('edit', transaction);
      };

      const deleteItem = document.createElement("div");
      deleteItem.className = "px-3 py-2 hover:bg-red-100 text-red-600 cursor-pointer text-sm";
      deleteItem.textContent = "Delete";
      deleteItem.onclick = () => {
        cleanupDropdowns();
        openModal('delete', transaction);
      };

      dropdown.append(editItem, deleteItem);
      btn.parentElement.appendChild(dropdown);
    }
    
    document.addEventListener("click", (e) => {
      if (!e.target.closest('.menu-btn, .dropdown-menu')) {
        cleanupDropdowns();
      }
      
      const pageButton = e.target.closest('[data-page]');
      if (pageButton && !pageButton.disabled && !pageButton.classList.contains('opacity-50')) {
        currentPage = parseInt(pageButton.dataset.page, 10);
        elements.section.scrollIntoView({ behavior: 'smooth' });
        render();
      }
    });

    elements.filters.toggleButton.addEventListener('click', () => {
        elements.filters.controls.classList.toggle('hidden');
    });

    elements.filters.apply.addEventListener('click', () => {
        applyFiltersAndSort();
        render();
        if(window.innerWidth < 768) {
            elements.filters.controls.classList.add('hidden');
        }
    });
    
    elements.filters.clear.addEventListener('click', () => {
        elements.filters.name.value = '';
        elements.filters.type.value = 'all';
        elements.filters.amount.value = '';
        elements.filters.date.value = '';
        elements.filters.sort.value = 'date-desc';
        applyFiltersAndSort();
        render();
        if(window.innerWidth < 768) {
            elements.filters.controls.classList.add('hidden');
        }
    });

    window.addEventListener('resize', render, { passive: true });

    // Listen for account changes from the other component
    window.addEventListener('accountChanged', (e) => {
        currentAccountId = e.detail.accountId;
        applyFiltersAndSort();
        render();
    });
    
    // --- MODAL EVENT LISTENERS ---
    elements.editModal.amount.addEventListener('input', (e) => {
        const input = e.target;
        const raw = input.value;
        const cursorStart = input.selectionStart;
        let value = raw.replace(/,/g, '');
        
        const validChars = value.match(/^(\d*)(\.?)(\d*)/) || [];
        let intPart = validChars[1] || '';
        let dot = validChars[2] || '';
        let decPart = validChars[3] || '';

        if (decPart.length > 2) {
            const rounded = Math.round(parseFloat(intPart + '.' + decPart) * 100) / 100;
            const [newInt, newDec = ''] = rounded.toFixed(2).split('.');
            intPart = newInt;
            decPart = newDec;
            dot = '.';
        }

        const intWithCommas = intPart.replace(/\B(?=(\d{3})+(?!\d))/g, ',');
        let formattedValue = intWithCommas;
        if (dot) {
            formattedValue += '.' + decPart;
        }

        const oldLeft = raw.slice(0, cursorStart);
        const newLeft = formattedValue.slice(0, cursorStart);
        const commasBefore = (oldLeft.match(/,/g) || []).length;
        const commasAfter = (newLeft.match(/,/g) || []).length;
        const diff = commasAfter - commasBefore;

        input.value = formattedValue;
        input.setSelectionRange(cursorStart + diff, cursorStart + diff);
    });

    elements.editModal.form.addEventListener('submit', async (e) => {
        e.preventDefault();
        
        const dateValue = elements.editModal.date.value;
        const localDate = new Date(dateValue + 'T00:00:00');
        const amountValue = parseFloat(elements.editModal.amount.value.replace(/,/g, ''));

        const endpoint = `/api/user/edit/${elements.editModal.type.value}`;
        const body = JSON.stringify({
            id: parseInt(elements.editModal.id.value, 10),
            title: elements.editModal.title.value,
            amount: amountValue,
            date: localDate.toISOString(),
        });
        
        try {
            await fetch(endpoint, { method: "POST", headers: { "Content-Type": "application/json" }, body });
            closeModal();
            await refresh();
        } catch (err) {
            console.error("Error updating transaction:", err);
        }
    });

    elements.deleteModal.confirm.addEventListener('click', async () => {
        if (!activeTransaction) return;
        const endpoint = `/api/user/delete/${activeTransaction.type}`;
        const body = JSON.stringify({ id: activeTransaction.id });
        
        try {
            await fetch(endpoint, { method: "POST", headers: { "Content-Type": "application/json" }, body });
            closeModal();
            await refresh();
        } catch (err) {
            console.error("Error deleting transaction:", err);
        }
    });
    
    elements.editModal.cancel.addEventListener('click', closeModal);
    elements.deleteModal.cancel.addEventListener('click', closeModal);

    // --- INITIALIZATION ---
    fetchTransactions();

  </script>
</section>
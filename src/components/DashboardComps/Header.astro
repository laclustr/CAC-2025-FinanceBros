---
import "../../global.css";
import {
  Select,
  SelectContent,
  SelectItem,
  SelectTrigger,
  SelectValue,
} from "@/components/starwind/select";

const clientOnlyId = "account-select-items";
---

<!-- Desktop: Floating Island (Top Left) -->
<div class="hidden lg:block fixed top-4 left-4 z-50">
  <div class="bg-white/95 backdrop-blur-md shadow-lg border border-gray-200/60 rounded-xl w-72 transition-all duration-300" id="desktop-island">
    <!-- Collapse/Expand Button -->
    <button id="collapse-btn" class="absolute -right-2 top-3 w-6 h-6 bg-white/95 backdrop-blur-md border border-gray-200/60 rounded-full shadow-sm hover:shadow-md transition-all duration-200 flex items-center justify-center text-gray-600 hover:text-gray-800">
      <svg id="collapse-icon" class="w-3 h-3 transition-transform duration-200" fill="none" stroke="currentColor" viewBox="0 0 24 24">
        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 19l-7-7 7-7"></path>
      </svg>
    </button>
    
    <div id="desktop-content" class="p-4">
      <!-- Balance Display -->
      <div class="mb-1">
        <p class="text-xs text-gray-500 font-medium mb-0.5">Balance</p>
        <p id="desktop-balance-display" class="text-2xl font-bold text-gray-900">$0.00</p>
      </div>
      
      <!-- Account Selector -->
      <div>
        <!-- <p class="text-xs text-gray-500 font-medium mb-1.5">Account</p> -->
        <Select>
          <SelectTrigger class="w-full h-8 text-xs text-center">
            <SelectValue placeholder="All Accounts" />
          </SelectTrigger>
          <SelectContent>
            <SelectItem value="all" class="text-center text-xs justify-center" id="all-accounts-item-desktop">All Accounts</SelectItem>
            <div id="account-select-items-desktop" class="flex flex-col items-center text-center w-full"></div>
          </SelectContent>
        </Select>
      </div>
    </div>
  </div>
</div>

<!-- Mobile: Compact Header (Scroll-away) -->
<header id="mobile-header" class="lg:hidden fixed top-2 left-2 right-2 z-50 transition-all duration-300">
  <div class="bg-white/95 backdrop-blur-md shadow-lg border border-gray-200/60 rounded-xl transition-all duration-300" id="mobile-container">
    <!-- Minimize/Expand Button -->
    <button id="mobile-minimize-btn" class="absolute -right-2 top-3 w-6 h-6 bg-white/95 backdrop-blur-md border border-gray-200/60 rounded-full shadow-sm hover:shadow-md transition-all duration-200 flex items-center justify-center text-gray-600 hover:text-gray-800">
      <svg id="mobile-minimize-icon" class="w-3 h-3 transition-transform duration-200" fill="none" stroke="currentColor" viewBox="0 0 24 24">
        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 19l-7-7 7-7"></path>
      </svg>
    </button>
    
    <div id="mobile-content" class="px-3 py-2.5">
      <div class="flex flex-col sm:flex-row sm:items-center sm:justify-between gap-1">
        <!-- Balance (Top/Left) -->
        <div class="min-w-0 flex-1">
          <p class="text-xs text-gray-500 font-medium leading-none">Balance</p>
          <p id="mobile-balance-display" class="text-lg font-bold text-gray-900 truncate mt-0.5">$0.00</p>
        </div>

        <!-- Account Selector (Bottom/Right) -->
        <div class="w-full sm:w-40">
          <Select>
            <SelectTrigger class="w-full h-8 text-xs text-center">
              <SelectValue placeholder="All Accounts" />
            </SelectTrigger>
            <SelectContent>
              <SelectItem value="all" class="text-center text-xs justify-center" id="all-accounts-item-mobile">All Accounts</SelectItem>
              <div id="account-select-items-mobile" class="flex flex-col items-center text-center w-full"></div>
            </SelectContent>
          </Select>
        </div>
      </div>
    </div>
  </div>
</header>

<style>
  #desktop-balance-display,
  #mobile-balance-display {
    font-variant-numeric: tabular-nums;
    letter-spacing: -0.025em;
  }

  #mobile-header.scrolled {
    transform: translateY(-100%);
    opacity: 0;
    pointer-events: none;
  }

  #desktop-island.collapsed #desktop-content {
    display: none;
  }

  #desktop-island.collapsed {
    width: auto;
    padding: 0;
  }

  #desktop-island.collapsed #collapse-btn {
    position: relative;
    right: 0;
    top: 0;
    margin: 12px;
  }

  /* Mobile minimizer styles */
  #mobile-container.minimized #mobile-content {
    display: none;
  }

  #mobile-container.minimized {
    width: auto;
    padding: 0;
    border-radius: 0.75rem;
  }

  #mobile-header.minimized {
    left: 8px;
    right: auto;
    width: auto;
  }

  #mobile-container.minimized #mobile-minimize-btn {
    position: relative;
    right: 0;
    top: 0;
    margin: 12px;
  }
</style>

<script type="module" is:client>
  const mountPointDesktop = document.getElementById('account-select-items-desktop');
  const mountPointMobile = document.getElementById('account-select-items-mobile');
  const allAccountsItemDesktop = document.getElementById('all-accounts-item-desktop');
  const allAccountsItemMobile = document.getElementById('all-accounts-item-mobile');

  function setupAllAccountsHandler(element) {
    if (element) {
      element.addEventListener('click', () => {
        const trigger = element.closest('[data-slot="content"]')?.previousElementSibling?.querySelector('[data-slot="trigger"]');
        trigger?.dispatchEvent(new Event("blur"));
        const event = new CustomEvent('accountSelected', {
          detail: {
            id: 'all',
            name: 'All Accounts',
          }
        });
        window.dispatchEvent(event);
      });
    }
  }

  setupAllAccountsHandler(allAccountsItemDesktop);
  setupAllAccountsHandler(allAccountsItemMobile);

  async function fetchAccounts() {
    try {
      const res = await fetch('/api/user/fetch/accounts', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
      });

      if (!res.ok) throw new Error('Failed to fetch accounts');

      const accounts = await res.json();

      [mountPointDesktop, mountPointMobile].forEach(mountPoint => {
        if (!mountPoint) return;

        for (const account of accounts) {
          const item = document.createElement('div');
          item.className = "select-item px-3 py-2 hover:bg-gray-100 cursor-pointer w-full text-center text-xs flex justify-center";
          item.setAttribute('data-value', account.id);
          item.setAttribute('role', 'option');
          item.setAttribute('tabindex', '-1');
          item.textContent = account.name;

          item.addEventListener('click', () => {
            const trigger = item.closest('[data-slot="content"]')?.previousElementSibling?.querySelector('[data-slot="trigger"]');
            trigger?.dispatchEvent(new Event("blur"));
            const event = new CustomEvent('accountSelected', {
              detail: {
                id: account.id,
                name: account.name,
              }
            });
            window.dispatchEvent(event);
          });

          mountPoint.appendChild(item);
        }
      });
    } catch (error) {
      console.error("Error loading accounts:", error);
    }
  }

  fetchAccounts();
</script>

<script>
  document.addEventListener('DOMContentLoaded', function () {
    // Desktop collapse functionality
    const collapseBtn = document.getElementById('collapse-btn');
    const collapseIcon = document.getElementById('collapse-icon');
    const desktopIsland = document.getElementById('desktop-island');
    
    if (collapseBtn && desktopIsland) {
      collapseBtn.addEventListener('click', () => {
        const isCollapsed = desktopIsland.classList.contains('collapsed');
        
        if (isCollapsed) {
          desktopIsland.classList.remove('collapsed');
          collapseIcon.style.transform = 'rotate(0deg)';
        } else {
          desktopIsland.classList.add('collapsed');
          collapseIcon.style.transform = 'rotate(180deg)';
        }
      });
    }

    // Mobile minimize functionality
    const mobileMinimizeBtn = document.getElementById('mobile-minimize-btn');
    const mobileMinimizeIcon = document.getElementById('mobile-minimize-icon');
    const mobileContainer = document.getElementById('mobile-container');
    const mobileHeader = document.getElementById('mobile-header');
    
    if (mobileMinimizeBtn && mobileContainer && mobileHeader) {
      mobileMinimizeBtn.addEventListener('click', () => {
        const isMinimized = mobileContainer.classList.contains('minimized');
        
        if (isMinimized) {
          mobileContainer.classList.remove('minimized');
          mobileHeader.classList.remove('minimized');
          mobileMinimizeIcon.style.transform = 'rotate(0deg)';
        } else {
          mobileContainer.classList.add('minimized');
          mobileHeader.classList.add('minimized');
          mobileMinimizeIcon.style.transform = 'rotate(180deg)';
        }
      });
    }

    // Mobile scroll functionality
    let lastScrollY = window.scrollY;
    let isScrollingDown = false;
    const scrollThreshold = 80;

    function handleScroll() {
      const currentScrollY = window.scrollY;
      const isAtTop = currentScrollY < scrollThreshold;

      if (currentScrollY > lastScrollY && currentScrollY > scrollThreshold) {
        if (!isScrollingDown) {
          isScrollingDown = true;
          mobileHeader?.classList.add('scrolled');
        }
      } else if (currentScrollY < lastScrollY || isAtTop) {
        if (isScrollingDown) {
          isScrollingDown = false;
          mobileHeader?.classList.remove('scrolled');
        }
      }

      lastScrollY = currentScrollY;
    }

    let scrollTimeout;
    window.addEventListener('scroll', () => {
      if (scrollTimeout) cancelAnimationFrame(scrollTimeout);
      scrollTimeout = requestAnimationFrame(handleScroll);
    }, { passive: true });

    function updateBalance(balance) {
      const formattedBalance = balance.toLocaleString('en-US', {
        style: 'currency',
        currency: 'USD',
        minimumFractionDigits: 2,
        maximumFractionDigits: 2
      });

      const desktopDisplay = document.getElementById('desktop-balance-display');
      const mobileDisplay = document.getElementById('mobile-balance-display');

      [desktopDisplay, mobileDisplay].forEach(element => {
        if (element) {
          element.style.transition = 'all 0.3s ease';
          element.style.transform = 'scale(1.02)';
          element.style.color = balance >= 0 ? '#059669' : '#DC2626';

          setTimeout(() => {
            element.textContent = formattedBalance;
          }, 50);

          setTimeout(() => {
            element.style.transform = 'scale(1)';
            element.style.color = '#111827';
          }, 300);
        }
      });
    }

    window.addEventListener('balanceUpdated', (e) => {
      updateBalance(e.detail.balance);
    });

    window.addEventListener('accountSelected', (e) => {
      console.log('Account selected:', e.detail);
    });

    if (window.currentBalance !== undefined) {
      updateBalance(window.currentBalance);
    }

    handleScroll();
  });
</script>
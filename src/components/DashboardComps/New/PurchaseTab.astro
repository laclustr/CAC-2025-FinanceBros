---
import { Button } from "@/components/starwind/button";
import FormField from './FormField.astro';
---

<div id="purchase-tab" class="tab-content h-full flex flex-col">
  <form id="purchase-form" class="flex-1 flex flex-col" novalidate>
    <div class="text-center mb-6 sm:mb-8">
      <div class="inline-flex items-center justify-center w-12 h-12 sm:w-16 sm:h-16 bg-red-100 rounded-full mb-4">
        <svg class="w-6 h-6 sm:w-8 sm:h-8 text-red-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M16 11V7a4 4 0 00-8 0v4M5 9h14l1 12H4L5 9z" />
        </svg>
      </div>
      <h2 class="text-xl sm:text-2xl font-bold text-gray-900 mb-2">Record a Purchase</h2>
      <p class="text-sm sm:text-base text-gray-600">Track your spending and expenses</p>
    </div>

    <!-- Error/Success Messages -->
    <div id="purchase-form-messages" class="max-w-md mx-auto w-full mb-4">
      <div id="purchase-error-message" class="hidden bg-red-50 border border-red-200 text-red-700 px-4 py-3 rounded-lg mb-4">
        <span class="purchase-error-text"></span>
      </div>
      <div id="purchase-success-message" class="hidden bg-green-50 border border-green-200 text-green-700 px-4 py-3 rounded-lg mb-4">
        <span class="purchase-success-text"></span>
      </div>
    </div>

    <div class="flex-1 space-y-4 sm:space-y-6 max-w-md mx-auto w-full">
      <FormField
        id="purchase-title"
        name="title"
        label="Purchase Title"
        type="text"
        placeholder="e.g., Groceries, Gas, Coffee"
        focusColor="red"
      />

      <FormField
        id="purchase-account"
        name="account"
        label="Account"
        type="select"
        options={['Loading...']}
        placeholder="Select an account"
        focusColor="red"
      />

      <FormField
        id="purchase-amount"
        name="amount"
        label="Amount ($)"
        type="text"
        placeholder="0.00"
        focusColor="red"
      />
    </div>

    <div class="mt-6 sm:mt-8 max-w-md mx-auto w-full">
      <Button 
        type="submit" 
        class="w-full bg-red-600 hover:bg-red-700 text-white font-medium py-2 sm:py-3 px-4 sm:px-6 rounded-lg transition-colors duration-200 focus:outline-none focus:ring-2 focus:ring-red-500 focus:ring-offset-2 text-sm sm:text-base disabled:opacity-50 disabled:cursor-not-allowed"
      >
        <span class="submit-text">Add Purchase</span>
        <span class="loading-text hidden">Processing...</span>
      </Button>
    </div>
  </form>

  <script type="module">
    window.addEventListener("DOMContentLoaded", async () => {
      const form = document.getElementById('purchase-form');
      const errorDiv = document.getElementById('purchase-error-message');
      const successDiv = document.getElementById('purchase-success-message');
      const errorText = errorDiv.querySelector('.purchase-error-text');
      const successText = successDiv.querySelector('.purchase-success-text');
      const submitButton = form.querySelector('button[type="submit"]');
      const submitText = submitButton.querySelector('.submit-text');
      const loadingText = submitButton.querySelector('.loading-text');

      const select = form.querySelector('#purchase-account');

      // Load account options
      try {
        const res = await fetch('/api/user/fetch/accounts', {
          method: 'POST',
          credentials: 'include',
        });

        if (res.ok) {
          const data = await res.json();
          select.innerHTML = ''; // Clear previous

          // Disabled placeholder option, not selectable
          const defaultOption = document.createElement('option');
          defaultOption.value = "";
          defaultOption.disabled = true;
          defaultOption.selected = true;
          defaultOption.hidden = true;
          defaultOption.textContent = 'Select an account';
          select.appendChild(defaultOption);

          data.forEach(account => {
            const option = document.createElement('option');
            option.value = account.name;
            option.textContent = account.name;
            select.appendChild(option);
          });
        } else {
          throw new Error('Failed to fetch accounts');
        }
      } catch (err) {
        console.error("Failed to load purchase account options:", err);
        select.innerHTML = '<option disabled selected>Failed to load</option>';
      }

      // Handle form submit
      form.addEventListener('submit', async (e) => {
        e.preventDefault();

        errorDiv.classList.add('hidden');
        successDiv.classList.add('hidden');

        // Validate account selection
        if (!select.value) {
          errorText.textContent = 'Please select a valid account.';
          errorDiv.classList.remove('hidden');
          return;
        }

        submitButton.disabled = true;
        submitText.classList.add('hidden');
        loadingText.classList.remove('hidden');

        try {
          const formData = new FormData(form);
          const response = await fetch('/api/user/push/purchases', {
            method: 'POST',
            body: formData,
            credentials: 'include'
          });

          const data = await response.json();

          if (!response.ok) {
            errorText.textContent = data.message || data.error || 'An error occurred while processing your request';
            errorDiv.classList.remove('hidden');
          } else {
            successText.textContent = data.message || 'Purchase added successfully!';
            successDiv.classList.remove('hidden');
            form.reset();
          }
        } catch (error) {
          // console.error('Error submitting purchase:', error);
          errorText.textContent = 'Network error - please check your connection and try again';
          errorDiv.classList.remove('hidden');
        } finally {
          submitButton.disabled = false;
          submitText.classList.remove('hidden');
          loadingText.classList.add('hidden');
        }
      });
    });
  </script>
</div>